package org.bouncycastle.crypto.generators;

import org.bouncycastle.crypto.DataLengthException;
import org.bouncycastle.crypto.DerivationFunction;
import org.bouncycastle.crypto.DerivationParameters;
import org.bouncycastle.crypto.Digest;
import org.bouncycastle.crypto.OutputLengthException;
import org.bouncycastle.crypto.params.MGFParameters;

/**
 * Generator for MGF1 as defined in PKCS 1v2
 */
public class MGF1BytesGenerator
    implements DerivationFunction
{
    private final Digest  digest;
    private byte[]  seed;
    private final int     hLen;

    /**
     * @param digest the digest to be used as the source of generated bytes
     */
    public MGF1BytesGenerator(
        final Digest  digest)
    {
        this.digest = digest;
        this.hLen = digest.getDigestSize();
    }

    @Override
	public void init(
        final DerivationParameters    param)
    {
        if (!(param instanceof MGFParameters))
        {
            throw new IllegalArgumentException("MGF parameters required for MGF1Generator");
        }

        final MGFParameters   p = (MGFParameters)param;

        this.seed = p.getSeed();
    }

    /**
     * @return the underlying digest.
     */
    public Digest getDigest()
    {
        return this.digest;
    }

    /**
     * int to octet string.
     */
    private void ItoOSP(
        final int     i,
        final byte[]  sp)
    {
        sp[0] = (byte)(i >>> 24);
        sp[1] = (byte)(i >>> 16);
        sp[2] = (byte)(i >>> 8);
        sp[3] = (byte)(i >>> 0);
    }

    /**
     * fill len bytes of the output buffer with bytes generated from
     * the derivation function.
     *
     * @throws DataLengthException if the out buffer is too small.
     */
    @Override
	public int generateBytes(
        final byte[]  out,
        final int     outOff,
        final int     len)
        throws DataLengthException, IllegalArgumentException
    {
        if (out.length - len < outOff)
        {
            throw new OutputLengthException("output buffer too small");
        }

        final byte[]  hashBuf = new byte[this.hLen];
        final byte[]  C = new byte[4];
        int     counter = 0;

        this.digest.reset();

        if (len > this.hLen)
        {
            do
            {
                ItoOSP(counter, C);

                this.digest.update(this.seed, 0, this.seed.length);
                this.digest.update(C, 0, C.length);
                this.digest.doFinal(hashBuf, 0);

                System.arraycopy(hashBuf, 0, out, outOff + counter * this.hLen, this.hLen);
            }
            while (++counter < len / this.hLen);
        }

        if (counter * this.hLen < len)
        {
            ItoOSP(counter, C);

            this.digest.update(this.seed, 0, this.seed.length);
            this.digest.update(C, 0, C.length);
            this.digest.doFinal(hashBuf, 0);

            System.arraycopy(hashBuf, 0, out, outOff + counter * this.hLen, len - counter * this.hLen);
        }

        return len;
    }
}
